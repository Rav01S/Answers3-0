// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  name                  String
  emailVerified         Boolean
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  sessions              Session[]
  accounts              Account[]
  taskVipAccess         TaskVipAccess[]
  subjects              Subjects[]
  tasks                 Tasks[]
  userDashboardSubjects UserDashboardSubject[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Subjects {
  id                   Int                    @id @default(autoincrement())
  name                 String
  isPublic             Boolean                @default(false) // Доступно гостям?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  tasks                Tasks[]                @relation("SubjectTasks")
  createdBy            String // ID пользователя-создателя
  creator              User                   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  UserDashboardSubject UserDashboardSubject[]

  @@map("subjects")
}

model Tasks {
  id        Int             @id @default(autoincrement())
  subjectId Int
  subject   Subjects        @relation(fields: [subjectId], references: [id], onDelete: Cascade, name: "SubjectTasks")
  title     String
  answer    Json?
  isVip     Boolean         @default(false) // Только задания могут быть VIP
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  vipAccess TaskVipAccess[]
  createdBy String // ID пользователя-создателя
  creator   User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskVipAccess {
  userId    String
  taskId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task      Tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  grantedAt DateTime @default(now())

  @@id([userId, taskId])
  @@map("task_vip_access")
}

model UserDashboardSubject {
  userId    String
  subjectId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject   Subjects @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  addedAt   DateTime @default(now())

  @@id([userId, subjectId])
  @@map("user_dashboard_subject")
}
